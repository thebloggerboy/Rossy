# handlers.py
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.constants import ParseMode
from telegram.error import BadRequest

from config import ADMIN_IDS, FORCE_SUB_CHANNELS, FILE_DATA, DELETE_DELAY, MAIN_CHANNEL_LINK, LOG_CHANNEL_ID
from database import db, add_user, ban_user, unban_user, get_all_user_ids, save_db

logger = logging.getLogger(__name__)

# --- ‡§´‡•à‡§Ç‡§∏‡•Ä ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ---
WELCOME_TEXT = "W·¥á ü·¥Ñ·¥è·¥ç·¥á, {user_name}! P ü·¥á·¥Äs·¥á ·¥ús·¥á ·¥Ä  ü…™…¥·¥ã “ì Ä·¥è·¥ç ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü."
JOIN_CHANNEL_TEXT = "P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥Ä ü ü  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á “ì…™ ü·¥á."
NOT_JOINED_ALERT = "Y·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ä ü ü  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs  è·¥á·¥õ. P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥."
BANNED_TEXT = "Y·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ."
FILE_NOT_FOUND_TEXT = "S·¥è Ä Ä è, “ì…™ ü·¥á ·¥ã·¥á è …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö."
DELETE_WARNING_TEXT = "‚ö†Ô∏è T ú…™s ·¥ç·¥á·¥Ö…™·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä“ì·¥õ·¥á Ä 15 ·¥ç…™…¥·¥ú·¥õ·¥ás.\nP ü·¥á·¥Äs·¥á s·¥Ä·¥†·¥á ·¥è Ä “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™s ·¥ç·¥á·¥Ö…™·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á\n·¥õ·¥è  è·¥è·¥ú Ä ·¥ò·¥á Äs·¥è…¥·¥Ä ü s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás\n·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö  ü·¥ès…™…¥…¢ ·¥õ ú·¥á·¥ç!"
RESEND_PROMPT_TEXT = "<i>Y·¥è·¥ú Ä F…™ ü·¥á ({file_key}) ·¥°·¥Äs D·¥á ü·¥á·¥õ·¥á·¥Ö üóë\nI“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢·¥á·¥õ …™·¥õ ·¥Ä…¢·¥Ä…™…¥, ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á 'W·¥Ä·¥õ·¥Ñ ú A…¢·¥Ä…™…¥'  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥°.</i>"
FINAL_DELETE_TEXT = "T ú·¥á 'W·¥Ä·¥õ·¥Ñ ú A…¢·¥Ä…™…¥'  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö ·¥è…¥·¥Ñ·¥á.\nI“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥°·¥Ä·¥õ·¥Ñ ú ·¥õ ú·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ä…¢·¥Ä…™…¥,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¢·¥á·¥õ …™·¥õ “ì Ä·¥è·¥ç ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü."

# handlers.py ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞

async def is_user_member(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    # ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•ã ‡§π‡§Æ‡•á‡§∂‡§æ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§¶‡•á‡§Ç
    if user_id in ADMIN_IDS:
        logger.info(f"User {user_id} is an admin. Bypassing force subscribe.")
        return True

    # ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∏‡§¨‡§ï‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§¶‡•á‡§Ç
    if not FORCE_SUB_CHANNELS:
        logger.info("No force subscribe channels set. Granting access.")
        return True

    # ‡§π‡§∞ ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§è‡§ï-‡§è‡§ï ‡§ï‡§∞‡§ï‡•á ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
    for channel in FORCE_SUB_CHANNELS:
        chat_id = channel["chat_id"]
        try:
            member = await context.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            # ‡§Ö‡§ó‡§∞ ‡§Ø‡•Ç‡§ú‡§∞ 'left' ‡§Ø‡§æ 'kicked' ‡§π‡•à, ‡§§‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§® ‡§¶‡•á‡§Ç
            if member.status in ['left', 'kicked']:
                logger.info(f"User {user_id} is not a member of channel {chat_id}. Status: {member.status}")
                return False
        except BadRequest as e:
            # ‡§Ö‡§ó‡§∞ ‡§¨‡•â‡§ü ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
            logger.error(f"Could not check membership for user {user_id} in channel {chat_id}. Error: {e}")
            # ‡§π‡§Æ ‡§á‡§∏‡•á ‡§è‡§ï ‡§´‡•á‡§≤‡§ø‡§Ø‡§∞ ‡§Æ‡§æ‡§®‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§§‡•á
            return False
        except Exception as e:
            logger.error(f"An unexpected error occurred while checking membership for user {user_id} in {chat_id}: {e}")
            return False
    
    # ‡§Ö‡§ó‡§∞ ‡§Ø‡•Ç‡§ú‡§∞ ‡§∏‡§≠‡•Ä ‡§≤‡•Ç‡§™‡•ç‡§∏ ‡§ï‡•ã ‡§™‡§æ‡§∏ ‡§ï‡§∞ ‡§≤‡•á‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§µ‡§π ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§π‡•à
    logger.info(f"User {user_id} is a member of all required channels.")
    return True
    
async def send_force_subscribe_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_key = context.user_data.get('file_key')
    if not file_key: return
    join_buttons = [InlineKeyboardButton(ch["name"], url=ch["invite_link"]) for ch in FORCE_SUB_CHANNELS]
    keyboard = [join_buttons, [InlineKeyboardButton("‚úÖ J·¥è…™…¥·¥á·¥Ö", callback_data=f"check_{file_key}")]]
    await update.message.reply_text(JOIN_CHANNEL_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))

async def auto_delete_messages(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id, message_ids, file_key, caption, is_resent = job.chat_id, job.data['message_ids'], job.data['file_key'], job.data['caption'], job.data.get('is_resent', False)
    try:
        for msg_id in message_ids:
            try: await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except BadRequest: pass
        if not is_resent:
            keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è W·¥Ä·¥õ·¥Ñ ú A…¢·¥Ä…™…¥", callback_data=f"resend_{file_key}"), InlineKeyboardButton("‚ùå D·¥á ü·¥á·¥õ·¥á", callback_data="close_msg")]]
            text = f"{caption}\n\n{RESEND_PROMPT_TEXT.format(file_key=file_key)}"
            await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("C ú·¥á·¥Ñ·¥ã M·¥Ä…™…¥ C ú·¥Ä…¥…¥·¥á ü", url=MAIN_CHANNEL_LINK)]]
            await context.bot.send_message(chat_id=chat_id, text=FINAL_DELETE_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e: logger.error(f"Error in auto_delete_messages: {e}")

# main.py ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞

async def send_file(user_id: int, file_key: str, context: ContextTypes.DEFAULT_TYPE, is_resend: bool = False, is_part_of_series: bool = False):
    if file_key not in FILE_DATA:
        if not is_part_of_series: await context.bot.send_message(chat_id=user_id, text=FILE_NOT_FOUND_TEXT)
        return
        
    file_info = FILE_DATA[file_key]
    file_type = file_info.get("type", "video")

    # --- ‡§∏‡•Ä‡§∞‡•Ä‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---
    if file_type == 'series':
        # ‡§Ø‡§π ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ, ‡§ú‡§¨ ‡§∏‡•Ä‡§∞‡•Ä‡§ú ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã
        if not is_part_of_series:
            episodes_to_send = file_info.get("episodes", [])
            await context.bot.send_message(chat_id=user_id, text=f"S·¥á…¥·¥Ö…™…¥…¢ ·¥Ä ü ü {len(episodes_to_send)} ·¥á·¥ò…™s·¥è·¥Ö·¥ás. P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...")
            for episode_key in episodes_to_send:
                await asyncio.sleep(2)
                # is_part_of_series=True ‡§≠‡•á‡§ú‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§™‡§§‡§æ ‡§ö‡§≤‡•á ‡§ï‡§ø ‡§Ø‡§π ‡§è‡§ï ‡§∏‡•Ä‡§∞‡•Ä‡§ú ‡§ï‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§π‡•à
                await send_file(user_id, episode_key, context, is_resend=False, is_part_of_series=True)
            await context.bot.send_message(chat_id=user_id, text="‚úÖ A ü ü ·¥á·¥ò…™s·¥è·¥Ö·¥ás  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ s·¥á…¥·¥õ!")
        return

    # --- ‡§∏‡§ø‡§Ç‡§ó‡§≤ ‡§´‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï (‡§Ö‡§¨ ‡§Ø‡§π ‡§∏‡•Ä‡§∞‡•Ä‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ) ---
    caption = file_info.get("caption", "")
    file_id = file_info.get("id")
    
    reply_markup = None
    if "buttons" in file_info:
        keyboard = []
        for row in file_info["buttons"]:
            button_row = [InlineKeyboardButton(btn["text"], url=btn.get("url"), callback_data=btn.get("callback_data")) for btn in row]
            keyboard.append(button_row)
        if keyboard: reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        message_to_delete = None
        # ... (‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã, ‡§´‡•ã‡§ü‡•ã, ‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§ï‡•ã‡§° ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§∞‡§π‡•á‡§ó‡§æ) ...
        if file_type == 'video':
            message_to_delete = await context.bot.send_video(chat_id=user_id, video=file_id, caption=caption, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        
        # ‡§ë‡§ü‡•ã-‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï
        if message_to_delete:
            warning_message = await context.bot.send_message(chat_id=user_id, text=DELETE_WARNING_TEXT)
            context.job_queue.run_once(
                auto_delete_messages, 
                DELETE_DELAY, 
                data={'message_ids': [message_to_delete.message_id, warning_message.message_id], 'file_key': file_key, 'caption': caption, 'is_resent': is_resend}, 
                chat_id=user_id
            )
            
    except Exception as e:
        logger.error(f"Error sending file {file_key}: {e}")
# --- ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§î‡§∞ ‡§¨‡§ü‡§® ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    is_new_user = add_user(user.id)
    
    if is_new_user and LOG_CHANNEL_ID:
        try:
            bot_username = (await context.bot.get_me()).username
            user_link = f"[{user.first_name}](tg://user?id={user.id})"
            text = f"‚úÖ N·¥á·¥° Us·¥á Ä\nB·¥è·¥õ: @{bot_username}\nN·¥Ä·¥ç·¥á: {user_link}\nID: `{user.id}`"
            if user.username: text += f"\nUs·¥á Ä…¥·¥Ä·¥ç·¥á: @{user.username}"
            await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=text, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e: logger.error(f"Failed to send log: {e}")
        
    if user.id in db["banned_users"]: await update.message.reply_text(BANNED_TEXT); return
    if context.args:
        file_key = context.args[0]; context.user_data['file_key'] = file_key
        if await is_user_member(user.id, context): await send_file(user.id, file_key, context)
        else: await send_force_subscribe_message(update, context)
    else:
        keyboard = [[InlineKeyboardButton("M·¥Ä…™…¥ C ú·¥Ä…¥…¥·¥á ü", url=MAIN_CHANNEL_LINK)]]
        await update.message.reply_text(WELCOME_TEXT.format(user_name=user.first_name), reply_markup=InlineKeyboardMarkup(keyboard))

# handlers.py ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    # --- ‡§ö‡•á‡§ï ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---
    if data.startswith("check_"):
        file_key = data.split("_", 1)[1]
        
        # ‡§™‡§π‡§≤‡•á ‡§Æ‡•á‡§Ç‡§¨‡§∞‡§∂‡§ø‡§™ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
        if await is_user_member(user_id, context):
            # ‡§Ö‡§ó‡§∞ ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç
            await query.answer()
            await query.message.delete()
            await send_file(user_id, file_key, context)
        else:
            # ‡§Ö‡§ó‡§∞ ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§™‡•â‡§™-‡§Ö‡§™ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§µ‡§æ‡§≤‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
            await query.answer(text=NOT_JOINED_ALERT, show_alert=True)
            
    # --- ‡§∞‡•Ä-‡§∏‡•á‡§Ç‡§° ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---
    elif data.startswith("resend_"):
        await query.answer()
        file_key = data.split("_", 1)[1]
        await query.message.delete()
        await send_file(user_id, file_key, context, is_resend=True)
        
    # --- ‡§ï‡•ç‡§≤‡•ã‡§ú ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---
    elif data == "close_msg":
        # ‡§™‡§π‡§≤‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç, ‡§´‡§ø‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
        await query.message.delete()
        await query.answer(text="M·¥áss·¥Ä…¢·¥á D·¥á ü·¥á·¥õ·¥á·¥Ö.", show_alert=False)
    
    # --- ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§¨‡§ü‡§® ‡§π‡•à ‡§§‡•ã ---
    else:
        # ‡§è‡§ï ‡§ñ‡§æ‡§≤‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§≠‡•á‡§ú‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ú‡§æ‡§è
        await query.answer()
# --- ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ---
async def id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    msg = update.message.reply_to_message
    if not msg: await update.message.reply_text("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á."); return
    text = f"üë§ Us·¥á Ä ID: `{msg.from_user.id}`\nüí¨ C ú·¥Ä·¥õ ID: `{msg.chat.id}`"
    file_id = None
    if msg.video: file_id = msg.video.file_id
    elif msg.document: file_id = msg.document.file_id
    elif msg.photo: file_id = msg.photo[-1].file_id
    elif msg.audio: file_id = msg.audio.file_id
    elif msg.voice: file_id = msg.voice.file_id
    elif msg.animation: file_id = msg.animation.file_id
    elif msg.sticker: file_id = msg.sticker.file_id
    if file_id: text += f"\nüìÑ F…™ ü·¥á ID: `{file_id}`"
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)

async def get_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    msg = update.message.reply_to_message
    if not msg or not msg.forward_origin: await update.message.reply_text("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä FORWARDED ·¥ç·¥áss·¥Ä…¢·¥á."); return
    origin = msg.forward_origin
    text = f"üì¢ O Ä…™…¢…™…¥·¥Ä ü C ú·¥Ä…¥…¥·¥á ü ID: `{origin.chat.id}`"
    file_id = None
    if msg.video: file_id = msg.video.file_id
    elif msg.document: file_id = msg.document.file_id
    elif msg.photo: file_id = msg.photo[-1].file_id
    if file_id: text += f"\nüìÑ F…™ ü·¥á ID: `{file_id}`"
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)

async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    total = len(db["users"]); banned = len(db["banned_users"])
    await update.message.reply_text(f"üìä B·¥è·¥õ S·¥õ·¥Ä·¥õs üìä\n\nüë§ T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total}\nüö´ B·¥Ä…¥…¥·¥á·¥Ö Us·¥á Äs: {banned}")

async def broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    msg = update.message.reply_to_message
    if not msg: await update.message.reply_text("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ."); return
    users, sent, failed = get_all_user_ids(), 0, 0
    await update.message.reply_text(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ·¥è {len(users)} ·¥ús·¥á Äs...")
    reply_markup = msg.reply_markup
    for user_id in users:
        try:
            await context.bot.copy_message(chat_id=int(user_id), from_chat_id=msg.chat_id, message_id=msg.message_id, reply_markup=reply_markup)
            sent += 1; await asyncio.sleep(0.1)
        except Exception as e:
            failed += 1; logger.error(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ “ì·¥Ä…™ ü·¥á·¥Ö “ì·¥è Ä {user_id}: {e}")
            if "bot was blocked" in str(e): db["users"].pop(str(user_id), None)
    save_db(db)
    await update.message.reply_text(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ “ì…™…¥…™s ú·¥á·¥Ö!\n\n‚úÖ S·¥á…¥·¥õ ·¥õ·¥è: {sent} ·¥ús·¥á Äs\n‚ùå F·¥Ä…™ ü·¥á·¥Ö “ì·¥è Ä: {failed}")

async def ban_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, ban=True):
    if update.effective_user.id not in ADMIN_IDS: return
    if not context.args: await update.message.reply_text(f"Us·¥Ä…¢·¥á: /{'ban' if ban else 'unban'} <user_id>"); return
    try:
        user_id, action = int(context.args[0]), "banned" if ban else "unbanned"
        success = ban_user(user_id) if ban else unban_user(user_id)
        if success: await update.message.reply_text(f"Us·¥á Ä {user_id}  ú·¥Äs  ô·¥á·¥á…¥ {action}.")
        else: await update.message.reply_text(f"Us·¥á Ä {user_id} {'is already banned' if ban else 'was not in ban list'}.")
    except ValueError: await update.message.reply_text("I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID.")

# --- ‡§∏‡§≠‡•Ä ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats_handler))
    application.add_handler(CommandHandler("broadcast", broadcast_handler))
    application.add_handler(CommandHandler("ban", ban_handler))
    application.add_handler(CommandHandler("unban", lambda u, c: ban_handler(u, c, ban=False)))
    application.add_handler(CommandHandler("id", id_handler))
    application.add_handler(CommandHandler("get", get_handler))
    application.add_handler(CallbackQueryHandler(button_handler))
