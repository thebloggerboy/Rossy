# handlers.py (Final, Complete, and Corrected Again)

import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.constants import ParseMode
from telegram.error import BadRequest

# ‡§π‡§Æ‡§æ‡§∞‡•á ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤‡•ç‡§∏ ‡§∏‡•á ‡•õ‡§∞‡•Ç‡§∞‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
from config import ADMIN_IDS, FORCE_SUB_CHANNELS, FILE_DATA, DELETE_DELAY, MAIN_CHANNEL_LINK
from database import db, add_user, ban_user, unban_user, get_all_user_ids, save_db

logger = logging.getLogger(__name__)

# --- ‡§´‡•à‡§Ç‡§∏‡•Ä ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ---
WELCOME_TEXT = "W·¥á ü·¥Ñ·¥è·¥ç·¥á, {user_name}! P ü·¥á·¥Äs·¥á ·¥ús·¥á ·¥Ä  ü…™…¥·¥ã “ì Ä·¥è·¥ç ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü."
JOIN_CHANNEL_TEXT = "P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥Ä ü ü  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á “ì…™ ü·¥á."
NOT_JOINED_ALERT = "Y·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ä ü ü  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs  è·¥á·¥õ. P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥."
BANNED_TEXT = "Y·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ."
FILE_NOT_FOUND_TEXT = "S·¥è Ä Ä è, “ì…™ ü·¥á ·¥ã·¥á è …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö."
DELETE_WARNING_TEXT = "‚ö†Ô∏è Y·¥è·¥ú Ä “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥°…™·¥õ ú…™…¥ 15 M…™…¥·¥ú·¥õ·¥ás. P ü·¥á·¥Äs·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è Ä “ì·¥è Ä·¥°·¥Ä Ä·¥Ö …™·¥õ."
RESEND_PROMPT_TEXT = "<i>Y·¥è·¥ú Ä F…™ ü·¥á ({file_key}) ·¥°·¥Äs D·¥á ü·¥á·¥õ·¥á·¥Ö üóë\nI“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢·¥á·¥õ …™·¥õ ·¥Ä…¢·¥Ä…™…¥, ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á 'W·¥Ä·¥õ·¥Ñ ú A…¢·¥Ä…™…¥'  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥°.</i>"

# --- ‡§π‡•á‡§≤‡•ç‡§™‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ ---
async def is_user_member(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if user_id in ADMIN_IDS: return True
    for channel in FORCE_SUB_CHANNELS:
        try:
            member = await context.bot.get_chat_member(chat_id=channel["chat_id"], user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']: return False
        except BadRequest: return False
    return True

async def send_force_subscribe_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_key = context.user_data.get('file_key')
    if not file_key: return
    join_buttons = [InlineKeyboardButton(ch["name"], url=ch["invite_link"]) for ch in FORCE_SUB_CHANNELS]
    keyboard = [join_buttons, [InlineKeyboardButton("‚úÖ J·¥è…™…¥·¥á·¥Ö", callback_data=f"check_{file_key}")]]
    await update.message.reply_text(JOIN_CHANNEL_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))

async def auto_delete_messages(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id, message_ids, file_key, caption = job.chat_id, job.data['message_ids'], job.data['file_key'], job.data['caption']
    try:
        for msg_id in message_ids:
            try: await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except BadRequest: pass
        
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è W·¥Ä·¥õ·¥Ñ ú A…¢·¥Ä…™…¥", callback_data=f"resend_{file_key}"), InlineKeyboardButton("‚ùå D·¥á ü·¥á·¥õ·¥á", callback_data="close_msg")]]
        
        text = f"{caption}\n\n{RESEND_PROMPT_TEXT.format(file_key=file_key)}"
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"Error in auto_delete_messages: {e}")

async def send_file(user_id: int, file_key: str, context: ContextTypes.DEFAULT_TYPE):
    if file_key not in FILE_DATA:
        await context.bot.send_message(chat_id=user_id, text=FILE_NOT_FOUND_TEXT)
        return
        
    file_info = FILE_DATA[file_key]
    caption = file_info.get("caption", "")
    
    video_message = await context.bot.send_video(chat_id=user_id, video=file_info["id"], caption=caption, parse_mode=ParseMode.HTML)
    warning_message = await context.bot.send_message(chat_id=user_id, text=DELETE_WARNING_TEXT)
    
    context.job_queue.run_once(
        auto_delete_messages, 
        DELETE_DELAY, 
        data={'message_ids': [video_message.message_id, warning_message.message_id], 'file_key': file_key, 'caption': caption}, 
        chat_id=user_id
    )

# --- ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§î‡§∞ ‡§¨‡§ü‡§® ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id)
    if user.id in db["banned_users"]:
        await update.message.reply_text(BANNED_TEXT); return

    if context.args:
        file_key = context.args[0]
        context.user_data['file_key'] = file_key
        if await is_user_member(user.id, context): await send_file(user.id, file_key, context)
        else: await send_force_subscribe_message(update, context)
    else:
        keyboard = [[InlineKeyboardButton("M·¥Ä…™…¥ C ú·¥Ä…¥…¥·¥á ü", url=MAIN_CHANNEL_LINK)]]
        await update.message.reply_text(
            WELCOME_TEXT.format(user_name=user.first_name),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    user_id = query.from_user.id; data = query.data
    
    if data.startswith("check_"):
        file_key = data.split("_", 1)[1]
        if await is_user_member(user_id, context):
            await query.message.delete(); await send_file(user_id, file_key, context)
        else:
            await query.answer(NOT_JOINED_ALERT, show_alert=True)
            
    elif data.startswith("resend_"):
        file_key = data.split("_", 1)[1]
        await query.message.delete(); await send_file(user_id, file_key, context)
        
    elif data == "close_msg":
        await query.message.delete()

# --- ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ---
async def id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    msg = update.message.reply_to_message
    if not msg: await update.message.reply_text("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è …¢·¥á·¥õ …™·¥õs IDs."); return
    text = f"--- ‚ÑπÔ∏è IDs F·¥è·¥ú…¥·¥Ö ‚ÑπÔ∏è ---\n\nüë§ Us·¥á Ä ID: {msg.from_user.id}\nüí¨ C ú·¥Ä·¥õ ID: {msg.chat.id}"
    file_id = None
    if msg.video: file_id = msg.video.file_id
    elif msg.document: file_id = msg.document.file_id
    if file_id: text += f"\n\nüìÑ F…™ ü·¥á ID:\n{file_id}"
    await update.message.reply_text(text)

async def get_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    msg = update.message.reply_to_message
    if not msg or not msg.forward_origin: await update.message.reply_text("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä FORWARDED ·¥ç·¥áss·¥Ä…¢·¥á."); return
    origin = msg.forward_origin
    text = f"--- ‚ÑπÔ∏è F·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö M·¥áss·¥Ä…¢·¥á IDs ‚ÑπÔ∏è ---\n\nüì¢ O Ä…™…¢…™…¥·¥Ä ü C ú·¥Ä…¥…¥·¥á ü ID: {origin.chat.id}"
    file_id = None
    if msg.video: file_id = msg.video.file_id
    elif msg.document: file_id = msg.document.file_id
    if file_id: text += f"\n\nüìÑ F…™ ü·¥á ID:\n{file_id}"
    await update.message.reply_text(text)

async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    total = len(db["users"]); banned = len(db["banned_users"])
    await update.message.reply_text(f"üìä B·¥è·¥õ S·¥õ·¥Ä·¥õs üìä\n\nüë§ T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total}\nüö´ B·¥Ä…¥…¥·¥á·¥Ö Us·¥á Äs: {banned}")

async def broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS: return
    msg = update.message.reply_to_message
    if not msg: await update.message.reply_text("P ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ."); return
    
    users = get_all_user_ids(); sent, failed = 0, 0
    await update.message.reply_text(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ·¥è {len(users)} ·¥ús·¥á Äs...")
    
    reply_markup = msg.reply_markup
    
    for user_id in users:
        try:
            await context.bot.copy_message(
                chat_id=int(user_id),
                from_chat_id=msg.chat_id,
                message_id=msg.message_id,
                reply_markup=reply_markup
            )
            sent += 1; await asyncio.sleep(0.1)
        except Exception as e:
            failed += 1; logger.error(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ “ì·¥Ä…™ ü·¥á·¥Ö “ì·¥è Ä {user_id}: {e}")
            if "bot was blocked by the user" in str(e):
                db["users"].pop(str(user_id), None)

    save_db(db)
    await update.message.reply_text(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ “ì…™…¥…™s ú·¥á·¥Ö!\n\n‚úÖ S·¥á…¥·¥õ ·¥õ·¥è: {sent} ·¥ús·¥á Äs\n‚ùå F·¥Ä…™ ü·¥á·¥Ö “ì·¥è Ä: {failed} ·¥ús·¥á Äs")

async def ban_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, ban=True):
    if update.effective_user.id not in ADMIN_IDS: return
    if not context.args: await update.message.reply_text(f"Us·¥Ä…¢·¥á: /{'ban' if ban else 'unban'} <user_id>"); return
    try:
        user_id = int(context.args[0])
        action = "banned" if ban else "unbanned"
        success = ban_user(user_id) if ban else unban_user(user_id)
        if success: await update.message.reply_text(f"Us·¥á Ä {user_id}  ú·¥Äs  ô·¥á·¥á…¥ {action}.")
        else: await update.message.reply_text(f"Us·¥á Ä {user_id} {'is already banned' if ban else 'was not in ban list'}.")
    except ValueError: await update.message.reply_text("I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID.")

# --- ‡§∏‡§≠‡•Ä ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats_handler))
    application.add_handler(CommandHandler("broadcast", broadcast_handler))
    application.add_handler(CommandHandler("ban", ban_handler))
    application.add_handler(CommandHandler("unban", lambda u, c: ban_handler(u, c, ban=False)))
    application.add_handler(CommandHandler("id", id_handler))
    application.add_handler(CommandHandler("get", get_handler))
    application.add_handler(CallbackQueryHandler(button_handler))
